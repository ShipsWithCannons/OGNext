import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.OpenOption
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:2.5.0'
        classpath "org.grails.plugins:hibernate:4.3.10.5"
        classpath "org.grails.plugins:database-migration:2.0.0.RC1"
    }
}

plugins {
    id "io.spring.dependency-management" version "0.5.2.RELEASE"
}

version "0.2-SNAPSHOT"
group "com.skiwi.olog"

apply plugin: "spring-boot"
apply plugin: "war"
apply plugin: "asset-pipeline"
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

assets {
    minifyJs = true
    minifyCss = true
}

def generatedResources = "$buildDir/generated-resources/main"

sourceSets {
    main {
        output.dir(generatedResources, builtBy: "generateResources")
        resources {
            srcDir "grails-app/migrations"
        }
    }
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    provided "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"

    compile "org.grails.plugins:hibernate"
    compile "org.grails.plugins:cache"
    compile "org.hibernate:hibernate-ehcache"
    compile "org.grails.plugins:scaffolding"

    runtime "org.grails.plugins:asset-pipeline"
    runtime "org.postgresql:postgresql:9.4-1206-jdbc42"
    runtime "org.grails.plugins:database-migration:2.0.0.RC1"

    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"

    // Note: It is recommended to update to a more robust driver (Chrome, Firefox etc.)
    testRuntime 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.44.0'

    console "org.grails:grails-console"
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

task generateResources {
    def commitHash = "git rev-parse HEAD".execute().text.trim()
    def uncommittedChanges = ("git status --porcelain".execute().text.trim()) ? "true" : "false"

    def generatedResourcesPath = Paths.get(generatedResources)
    Files.createDirectories(generatedResourcesPath)

    def infoPath = generatedResourcesPath.resolve("info.properties")
    def infoWriter = Files.newBufferedWriter(infoPath, StandardCharsets.UTF_8, [StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING] as OpenOption[])
    infoWriter.withWriter { writer ->
        writer.println("version=$version")
        writer.println("commitHash=$commitHash")
        writer.println("uncommittedChanges=$uncommittedChanges")
    }

    def gitDiffPath = generatedResourcesPath.resolve("gitdiff.txt")
    Files.deleteIfExists(gitDiffPath)
    if (uncommittedChanges) {
        def gitDiff = "git diff HEAD".execute().text
        def diffWriter = Files.newBufferedWriter(gitDiffPath, StandardCharsets.UTF_8, StandardOpenOption.CREATE_NEW)
        diffWriter.withWriter { it.print(gitDiff) }
    }
}

war.doLast {
    def uncommittedChanges = "git status --porcelain".execute().text
    if (uncommittedChanges) {
        println "WARNING: You have built a WAR with uncommitted changes, did you forget to commit before building?"
        println "You might have a wrong commit hash in the WAR at this moment."
    }
}